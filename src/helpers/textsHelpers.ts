/**
 * –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –§–∞–º–∏–ª–∏—è –ò.–û. 
 * @param str 
 * @returns 
 */

export function initials(str: string) {
    const firstInit = str
      .split(/\s+/)
      .map((w: string, i: any) => (i ? w.substring(0, 1).toUpperCase() + '.' : w))
      .join(' ');
    const secondInit = firstInit.split(' ');
    return `${secondInit[0]} ${secondInit[1]}${secondInit[2]}`;
  }


/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–Ω—ã–º–∏ –§–ò–û, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏, –≤ —Å—Ç—Ä–æ–∫—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏.
 * @param str –°—Ç—Ä–æ–∫–∞ —Å –§–ò–û, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á")
 * @returns –°—Ç—Ä–æ–∫–∞ —Å –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–≤–∞–Ω–æ–≤ –ò.–ò., –ü–µ—Ç—Ä–æ–≤ –ü.–ü."
 */
export function initialsStr(str: string): string {
  console.log("üöÄ ~ initialsStr ~ str:", str)
  // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –§–ò–û –ø–æ –∑–∞–ø—è—Ç—ã–º
  return str?.split(',')
      .map(fullName => {
          // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
          const nameParts = fullName.trim().split(/\s+/);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è
          if (nameParts.length < 2) {
              // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
              return fullName.trim();
          }

          const [surname, name, patronymic] = nameParts;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
          let initials = `${surname} ${name.charAt(0).toUpperCase()}.`;
          if (patronymic) {
              initials += `${patronymic.charAt(0).toUpperCase()}.`;
          }
          console.log("üöÄ ~ initialsStr ~ initials:", initials)

          return initials;
      })
      .join(', ');
}